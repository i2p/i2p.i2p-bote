apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    defaultConfig {
        versionCode 17
        versionName '0.6.3'
        minSdkVersion 14
        targetSdkVersion 26
        multiDexEnabled true

        // For Espresso
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-DEBUG'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    lintOptions {
        abortOnError false
    }
    packagingOptions {
        exclude 'LICENSE.txt'
    }
    dexOptions {
        javaMaxHeapSize '2g'
        jumboMode = true
    }
}

def supportVersion = '25.4.0'

configurations.all {
    resolutionStrategy {
        force "com.android.support:design:$supportVersion"
        force "com.android.support:support-annotations:$supportVersion"
    }
}

dependencies {
    // Local dependencies
    implementation(project(':core')) {
        // Replaced with Android-specific JavaMail
        exclude group: 'com.sun.mail'
        exclude group: 'com.sun.activation'
        // BouncyCastle is replaced with SpongyCastle
        exclude group: 'org.bouncycastle'
    }
    implementation project(':crypto')
    implementation fileTree(dir: 'libs', include: '*.jar')

    // Android Support Repository dependencies
    //noinspection GradleCompatible
    implementation 'com.android.support:multidex:1.0.3'
    implementation "com.android.support:support-annotations:$supportVersion"
    implementation "com.android.support:support-v4:$supportVersion"
    implementation "com.android.support:appcompat-v7:$supportVersion"
    implementation "com.android.support:preference-v7:$supportVersion"
    implementation "com.android.support:preference-v14:$supportVersion"
    implementation "com.android.support:recyclerview-v7:$supportVersion"

    // Remote dependencies
    implementation 'com.sun.mail:android-mail:1.6.3'
    implementation 'com.sun.mail:android-activation:1.6.3'
    implementation "net.i2p:router:$rootProject.i2pVersion"
    implementation "net.i2p.android:client:$rootProject.i2pVersion@aar"
    implementation 'net.i2p.android:helper:0.9.5@aar'
    implementation 'net.i2p.android.ext:floatingactionbutton:1.10.1'
    implementation 'com.madgag.spongycastle:core:1.58.0.0'
    implementation 'com.madgag.spongycastle:prov:1.58.0.0'
    implementation 'com.lambdaworks:scrypt:1.4.0'
    implementation 'com.google.zxing:core:3.3.0'
    implementation 'com.google.zxing:android-integration:3.3.0'
    implementation 'com.androidplot:androidplot-core:1.5.6'
    implementation 'com.inkapplications.viewpageindicator:library:2.4.4'
    implementation 'com.pnikosis:materialish-progress:1.7'
    implementation 'com.mikepenz:iconics-core:2.7.2@aar'
    implementation 'com.mikepenz:google-material-typeface:2.2.0.3.original@aar'
    implementation('com.mikepenz:materialdrawer:5.4.0@aar') {
        transitive = true
    }
    implementation 'org.sufficientlysecure:html-textview:3.1'

    // Testing-only dependencies
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-intents:3.0.2'
}

project.ext.i2pbase = '../release-android/i2p.i2p'
def Properties props = new Properties()
def propFile = new File(project(':android').projectDir, 'local.properties')

if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if (props != null &&
            props.containsKey('i2psrc')) {
        i2pbase = props['i2psrc']
    } else {
        println 'local.properties found but some entries are missing'
    }
} else {
    println 'local.properties not found'
}

task certificatesZip(type: Zip) {
    archiveName = 'certificates_zip'
    into('reseed') {
        from files('' + i2pbase + '/installer/resources/certificates/reseed')
    }
    into('ssl') {
        from files('' + i2pbase + '/installer/resources/certificates/ssl')
    }
}
task copyI2PResources(type: Copy) {
    // Force this to always run: Copy only detects source changes, not if missing in destination
    outputs.upToDateWhen { false }
    into 'src/main/res/raw'
    from certificatesZip
}
task cleanI2PResources(type: Delete) {
    delete file('src/main/res/raw/certificates_zip')
}
preBuild.dependsOn copyI2PResources
clean.dependsOn cleanI2PResources

apply from: "${project.rootDir}/gradle/signing.gradle"
