/*
 * Copyright Jack Grigg <str4d@mail.i2p>
 */

apply plugin: I2PPlugin

class Pack200Task extends DefaultTask {
    @InputFiles
    def FileCollection inputJars

    @OutputDirectory
    def File outputDir

    @TaskAction
    def packJars(IncrementalTaskInputs inputs) {
        if (!inputs.incremental)
            project.delete(outputDir.listFiles())

        inputs.outOfDate { jar ->
            def tmp = jar.file
            def packed = "$outputDir/${jar.file.name}.pack"
            // Pretend that WARs are JARs
            if (jar.file.name.endsWith('.war')) {
                project.copy {
                    from jar.file
                    into temporaryDir
                    rename { "${it}.jar" }
                }
                tmp = "$temporaryDir/${jar.file.name}.jar"
            }
            // Current SCrypt was signed without running pack200 --repack,
            // so we have to strip the signatures to get pack200 to work
            if (jar.file.name.startsWith('scrypt')) {
                def scryptdir = "$temporaryDir/scrypt-filter-dir"
                tmp = "$temporaryDir/scrypt-filtered.jar"
                project.copy {
                    from project.zipTree(jar.file)
                    into scryptdir
                    exclude 'META-INF/LAMBDAWO.*'
                }
                project.exec {
                    workingDir scryptdir
                    executable 'zip'
                    args '-r',
                         tmp,
                         '.'
                }
            }
            project.exec {
                executable 'pack200'
                args '--no-gzip',
                     '--effort=9',
                     '--modification-time=latest',
                     packed,
                     tmp
            }
        }

        inputs.removed { jar ->
            println "removed: ${jar.file.name}"
            def targetFile = new File(outputDir, "${jar.file.name}.pack")
            targetFile.delete()
        }
    }
}

class I2PPlugin implements Plugin<Project> {
    def pluginProps = [
        'name':    ['name',    true],
        'signer':  ['signer',  true],
        'version': ['version', true],

        'author':        ['author',       false],
        'description':   ['description',  false],
        'websiteURL':    ['websiteUrl',   false],
        'updateURL.su3': ['su3UpdateUrl', false],
        'license':       ['license',      false],
        'disableStop':   ['disableStop',  false],

        'consoleLinkName':    ['consoleLinkName',    false],
        'consoleLinkURL':     ['consoleLinkURL',     false],
        'consoleLinkTooltip': ['consoleLinkTooltip', false],
        'console-icon':       ['consoleIcon',        false],
        'icon-code':          ['consoleIconCode',    false],

        'min-i2p-version':         ['minI2PVersion',         false],
        'max-i2p-version':         ['maxI2PVersion',         false],
        'min-java-version':        ['minJavaVersion',        false],
        'min-jetty-version':       ['minJettyVersion',       false],
        'max-jetty-version':       ['maxJettyVersion',       false],
        'dont-start-at-install':   ['dontStartAtInstall',    false],
        'router-restart-required': ['routerRestartRequired', false],
        'update-only':             ['updateOnly',            false],
        'install-only':            ['installOnly',           false],
        'min-installed-version':   ['minInstalledVersion',   false],
        'max-installed-version':   ['maxInstalledVersion',   false],
    ]

    static def pluginLibs(Project project) {
        project.configurations.runtime.filter { lib -> !(
            // These are all in the standard classpath
            lib.name.startsWith('i2p-') ||
            lib.name.startsWith('javax.servlet-') ||
            lib.name.startsWith('javax.servlet.jsp-') ||
            lib.name.startsWith('jstl-') ||
            lib.name.startsWith('mstreaming-') ||
            lib.name.startsWith('servlet-i2p-') ||
            lib.name.startsWith('streaming-') ||
            lib.name.startsWith('tomcat-')
        )}
    }

    static def pubKeyStore(Project project) {
        project.file(project.i2p.plugin.pubKeyStore ?
                     project.i2p.plugin.pubKeyStore :
                     "$project.i2p.plugin.pluginKeyDir/$project.i2p.plugin.pubKeyStoreName")
    }

    static def privKeyStore(Project project) {
        project.file(project.i2p.plugin.privKeyStore ?
                     project.i2p.plugin.privKeyStore :
                     "$project.i2p.plugin.pluginKeyDir/$project.i2p.plugin.privKeyStoreName")
    }

    void apply(Project project) {
        project.extensions.create('i2p', I2PExtension)
        project.i2p.extensions.create('plugin', I2PPluginExtension)
        project.i2p.plugin.extensions.create('console', I2PPluginConsoleExtension)
        project.i2p.plugin.console.extensions.create('webapp', I2PPluginConsoleWebappExtension)

        def pluginBuildDir = "$project.buildDir/plugin.tmp"
        def tmpPluginConfig = "$pluginBuildDir/plugin.config"
        def tmpWebappsConfig = "$pluginBuildDir/webapps.config"

        project.task('preparePluginConfig').doLast {
            def hasProp = []

            project.delete(tmpPluginConfig)
            project.copy {
                from 'src/main/i2p/plugin.config'
                into pluginBuildDir
                filter { line ->
                    for (p in pluginProps) {
                        if (line.startsWith("$p.key=")) {
                            if (project.i2p.plugin[p.value[0]]) {
                                return null
                            } else {
                                hasProp.add(p.key)
                            }
                        }
                    }
                    line
                }
            }

            File file = new File(tmpPluginConfig)
            for (p in pluginProps) {
                if (!(p.key in hasProp)) {
                    def (confName, required) = p.value
                    if (project.i2p.plugin[confName]) {
                        file << System.getProperty('line.separator')
                        file << "$p.key=" << project.i2p.plugin[confName]
                    } else if (required) {
                        throw new InvalidUserDataException(
                            "You must set i2p.plugin.$confName in your build.gradle")
                    }
                }
            }
            file << System.getProperty('line.separator')
            file << 'date=' << System.currentTimeMillis()
        }

        project.task('prepareWebappsConfig').doLast {
            project.delete(tmpWebappsConfig)
            File file = new File(tmpWebappsConfig)
            file << 'webapps.' << project.archivesBaseName << '.classpath='
            if (project.i2p.plugin.console.webapp.includeTaglib) {
                file << '$I2P/lib/jstl.jar,$I2P/lib/standard.jar,'
            }
            file << pluginLibs(project).collect { lib ->
                '$PLUGIN/lib/' + lib.name
            }.join(',')
            file << System.getProperty('line.separator')
            file << 'webapps.' << project.archivesBaseName << '.startOnLoad='
            file << project.i2p.plugin.console.webapp.startOnLoad
        }

        project.task('thinWar', type: War, dependsOn: project.classes) {
            destinationDir = project.file("$project.buildDir/thinWar")
            classpath = project.thinWar.classpath.filter { lib -> !(
                lib.name.endsWith('.jar')
            )}
        }

        project.task('packWebapp', type: Pack200Task) {
            inputJars = project.thinWar.outputs.files
            outputDir project.file("$project.buildDir/packWebapp")
        }

        project.task('packLibs', type: Pack200Task) {
            inputJars = pluginLibs(project)
            outputDir project.file("$project.buildDir/packLibs")
        }

        project.task('pluginZip', type: Zip) {
            archiveName = 'plugin.zip'
            destinationDir = project.file(pluginBuildDir)

            from tmpPluginConfig
            into('console') {
                from tmpWebappsConfig
                into('webapps') {
                    from project.packWebapp.outputs.files
                }
            }
            into('lib') {
                from project.packLibs.outputs.files
            }
        }
        project.pluginZip.dependsOn project.preparePluginConfig
        project.pluginZip.dependsOn project.prepareWebappsConfig

        project.task('checkKeys').doLast {
            def pks = privKeyStore(project)
            if (!pks.exists()) {
                println "TODO: Creating new SU3 $project.i2p.plugin.keyType keys for $project.i2p.plugin.signer"
            }
        }

        project.configurations.create('i2pPluginSign')
        project.dependencies.add('i2pPluginSign', 'net.i2p:i2p:+')
        project.dependencies.add('i2pPluginSign', project.files('/usr/share/java/gnu-getopt.jar'))

        project.afterEvaluate { p ->
            def pluginDir = p.file("$p.buildDir/plugin")

            p.task('signSU3Plugin', type: JavaExec) {
                def su3File = p.file("$pluginDir/${p.i2p.plugin.name}.su3")
                inputs.files p.pluginZip.outputs.files
                outputs.files su3File
                standardInput = System.in
                main = 'net.i2p.crypto.SU3File'
                classpath = p.configurations.i2pPluginSign
                args 'sign',
                     '-c',
                     'PLUGIN',
                     '-t',
                     p.i2p.plugin.keyType,
                     p.pluginZip.outputs.files[0].absolutePath,
                     su3File,
                     privKeyStore(p),
                     p.i2p.plugin.version,
                     p.i2p.plugin.signer

                doFirst {
                    p.mkdir(pluginDir)
                }
            }
            p.signSU3Plugin.dependsOn p.pluginZip
            p.signSU3Plugin.dependsOn p.checkKeys

            p.task('verifySU3Plugin', type: JavaExec) {
                main = 'net.i2p.crypto.SU3File'
                classpath = p.configurations.i2pPluginSign
                args 'verifysig',
                     '-k',
                     pubKeyStore(p),
                     p.signSU3Plugin.outputs.files[0].absolutePath
            }

            p.task('plugin').doLast {
                // For now, update files are identical to install files
                p.copy {
                    into pluginDir
                    from p.signSU3Plugin.outputs.files[0]
                    rename {
                        "${p.i2p.plugin.name}-update.su3"
                    }
                }
            }
            p.plugin.dependsOn p.signSU3Plugin
            p.plugin.dependsOn p.verifySU3Plugin
        }
    }
}

class I2PExtension {
}

class I2PPluginExtension {
    def String pluginKeyDir = System.getProperty('user.home') + '/.i2p-plugin-keys'
    def String pubKeyStoreName = 'plugin-su3-public-signing.crt'
    def String pubKeyStore
    def String privKeyStoreName = 'plugin-su3-keystore.ks'
    def String privKeyStore
    def String keyType = 'RSA_SHA512_4096'

    def String name
    def String signer
    def String version

    def String author
    def String description
    def String websiteUrl
    def String su3UpdateUrl
    def String license
    def String disableStop

    def String consoleLinkName
    def String consoleLinkURL
    def String consoleLinkTooltip
    def String consoleIcon
    def String consoleIconCode

    def String minI2PVersion
    def String maxI2PVersion
    def String minJavaVersion
    def String minJettyVersion
    def String maxJettyVersion
    def String dontStartAtInstall
    def String routerRestartRequired
    def String updateOnly
    def String installOnly
    def String minInstalledVersion
    def String maxInstalledVersion
}

class I2PPluginConsoleExtension {
}

class I2PPluginConsoleWebappExtension {
    def boolean startOnLoad = true
    def boolean includeTaglib = false
}
